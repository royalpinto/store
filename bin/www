#!/usr/bin/env node
var cluster = require('cluster');
var mongodb = require('mongodb');
var config = require('./../config');
var models = require('./../models');

if (cluster.isMaster) {
    var initdata = require('./../initdata');
    var os = require('os');
    var db;

    console.log("Using %s environment", config.env);

    // Connect to the DB, then start the server.
    mongodb.MongoClient.connect(config.db.uri)
    .then(function(_db) {
        db = _db;
        return models.init(db);
    })
    .then(function() {
        return initdata();
    })
    .then(function() {
        db.close();
    })
    .then(function() {
        var cpuCount = os.cpus().length;
        for (var i = 0; i < cpuCount; i += 1) {
            cluster.fork();
        }

        cluster.on('exit', function(worker) {
            // Replace the dead worker with a new.
            console.error('Worker %d died, forking a new one.', worker.id);
            cluster.fork();
        });
    })
    .catch(console.error)
    ;
} else {
    var server = require('../app');
    /**
     * Event listener for HTTP server "listening" event.
     */
    var onListening = function() {
        var addr = this.address();
        var bind = (typeof addr === 'string' ? 'pipe ' + addr :
            'port ' + addr.port);
        console.log('Worker %d listening on ' + bind, cluster.worker.id);
    };

    var onError = function(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var port = config.server.port;
        var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    };

    // Connect to the DB, then start the server.
    mongodb.MongoClient.connect(config.db.uri)
    .then(function(db) {
        return models.init(db);
    })
    .then(function() {
        var close = function() {
            // Worker recieved a SIG KILL/TERM/INT signal.
            // Close the server
            server.close();
        };

        process.on('exit', close);
        process.on('SIGTERM', close);
        process.on('SIGINT', close);

        server.on('error', onError);
        server.on('listening', onListening);
        server.listen(config.server.port, config.server.interface);
    })
    .catch(console.error)
    ;
}
