#!/usr/bin/env node

/**
 * Module dependencies.
 */

var http = require('http');
var mongoose = require('mongoose');
var config = require('config');
var app = require('../app');
var server = http.createServer(app);

// mpromise (mongoose's default promise library) is deprecated
// Use the default Promise from node.
mongoose.Promise = global.Promise;

/**
 * Event listener for HTTP server "listening" event.
 */
var onListening = function() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind);
};

var onError = function(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var port = config.server.port;
    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
};

// Connect to the DB, then start the server.
mongoose.connect(config.db.uri, function(err) {
    if (err) {
        console.error("DB connection with error: %s", err.message || err);
        return;
    }

    server.on('error', onError);
    server.on('listening', onListening);
    server.listen(config.server.port, config.server.interface);
});
