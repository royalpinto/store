#!/usr/bin/env node

'use strict';


const cluster = require('cluster');
const mongodb = require('mongodb');
const config = require('./../config');
const models = require('./../models');

if (cluster.isMaster) {
    const initdata = require('./../initdata');
    const os = require('os');
    let db;

    console.log("Using %s environment", config.env);

    // Connect to the DB, then start the server.
    mongodb.MongoClient.connect(config.db.uri)
    .then(_db => {
        db = _db;
        return models.init(db);
    })
    .then(() => {
        return initdata();
    })
    .then(() => {
        db.close();
    })
    .then(() => {
        let cpuCount = os.cpus().length;
        for (let i = 0; i < cpuCount; i += 1) {
            cluster.fork();
        }

        cluster.on('exit', worker => {
            // Replace the dead worker with a new.
            console.error('Worker %d died, forking a new one.', worker.id);
            cluster.fork();
        });
    })
    .catch(console.error)
    ;
} else {
    const server = require('../app');

    const onListening = () => {
        console.log(`Worker %d listening on %s:%d`,
            cluster.worker.id,
            config.server.interface || ':',
            config.server.port);
    };

    const onError = error => {
        console.error("Failed to start the server with following error:\n",
            error);
    };

    // Connect to the DB, then start the server.
    mongodb.MongoClient.connect(config.db.uri)
    .then(db => {
        return models.init(db);
    })
    .then(() => {
        let close = () => {
            // Worker recieved a SIG KILL/TERM/INT signal.
            // Close the server
            server.close();
        };

        process.on('exit', close);
        process.on('SIGTERM', close);
        process.on('SIGINT', close);

        server.on('error', onError);
        server.on('listening', onListening);
        server.listen(config.server.port, config.server.interface);
    })
    .catch(console.error)
    ;
}
